/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => TextProcessingPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var TextProcessingPlugin = class extends import_obsidian.Plugin {
  async onload() {
    this.addCommand({
      id: "convert-article-headings",
      name: "\u5C07\u6587\u4EF6\u4E2D\u7684\u689D\u6B3E\u8F49\u63DB\u6210\u6A19\u984C",
      callback: () => this.convertArticleHeadings()
    });
    this.addCommand({
      id: "clean-document",
      name: "\u6574\u7406\u6587\u4EF6",
      callback: () => this.cleanDocument()
    });
    this.addCommand({
      id: "split-document",
      name: "\u62C6\u5206\u6587\u4EF6",
      callback: () => this.splitDocument()
    });
    this.addCommand({
      id: "clean-table",
      name: "\u6574\u7406\u689D\u6587\u5C0D\u7167\u8868",
      callback: () => this.cleanTable()
    });
    this.registerEvent(
      this.app.workspace.on("editor-menu", (menu, editor, view) => {
        menu.addItem((item) => {
          item.setTitle("\u8F49\u63DB\u689D\u6B3E\u70BA\u6A19\u984C").setIcon("heading").onClick(() => {
            this.convertArticleHeadings();
          });
        });
        menu.addItem((item) => {
          item.setTitle("\u6574\u7406\u6587\u4EF6").setIcon("scissors").onClick(() => {
            this.cleanDocument();
          });
        });
        menu.addItem((item) => {
          item.setTitle("\u62C6\u5206\u6587\u4EF6").setIcon("scissors").onClick(() => {
            this.splitDocument();
          });
        });
        menu.addItem((item) => {
          item.setTitle("\u6574\u7406\u689D\u6587\u5C0D\u7167\u8868").setIcon("scissors").onClick(() => {
            this.cleanTable();
          });
        });
      })
    );
  }
  /**
   * 取得當前選取文字，並利用傳入的處理函式處理後替換原文字
   */
  processSelectedText(processor) {
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if (activeView) {
      const editor = activeView.editor;
      const selectedText = editor.getSelection();
      const processedText = processor(selectedText);
      editor.replaceSelection(processedText);
    }
  }
  /**
   * 將文件中的條款轉換成標題
   */
  convertArticleHeadings() {
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if (activeView) {
      const editor = activeView.editor;
      const content = editor.getValue();
      const updatedContent = content.replace(/^第\s*[零一二三四五六七八九十百千萬]+\s*編/gm, (match) => `# ${match}`).replace(/^第\s*[零一二三四五六七八九十百千萬]+\s*章/gm, (match) => `## ${match}`).replace(/^第\s*[零一二三四五六七八九十百千萬]+\s*節/gm, (match) => `### ${match}`).replace(/^第\s*[零一二三四五六七八九十百千萬]+\s*款/gm, (match) => `#### ${match}`).replace(/^第\s*[零一二三四五六七八九十百千萬]+\s*目/gm, (match) => `##### ${match}`).replace(/^第\s*\d+\s*條/gm, (match) => `###### ${match}`).replace(/^資料來源：全國法規資料庫/gm, (match) => `# ${match}`);
      editor.setValue(updatedContent);
    }
  }
  /**
   * 拆分文件
   */
  async splitDocument() {
    var _a;
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if (activeView) {
      try {
        this.cleanDocument();
        const editor = activeView.editor;
        const content = editor.getValue();
        const folderPathPre = this.app.vault.getAbstractFileByPath(activeView.file.path).path;
        const folderPath = folderPathPre.replace(/.md$/, "");
        const currentFileName = activeView.file.basename;
        const folderName = folderPath.split("/").pop();
        await this.app.vault.createFolder(folderPath);
        const sections = content.split(/(?=^\d+\.)/gm);
        let updatedContent = content;
        const fileNames = /* @__PURE__ */ new Set();
        const prefix = `---
tags:
  - \u8003\u984C
  - \u984C\u76EE
  - \u672A\u5B8C
Sourse:
Relate: 
aliases:
---
`;
        for (let i = 0; i < sections.length; i++) {
          const section = sections[i];
          const sectionTitle = (_a = section.match(/^\d+\./)) == null ? void 0 : _a[0];
          if (sectionTitle) {
            let cleanTitle = sectionTitle.replace(/\.$/, "").trim();
            let newFileName = `${folderPath}/${folderName}-\u7B2C1\u5927\u984C\u7B2C${cleanTitle}\u984C.md`;
            let counter = 2;
            while (fileNames.has(newFileName)) {
              newFileName = `${folderPath}/${folderName}-\u7B2C${counter}\u5927\u984C\u7B2C${cleanTitle}\u984C.md`;
              counter++;
            }
            fileNames.add(newFileName);
            await this.app.vault.create(newFileName, prefix + section);
            updatedContent = updatedContent.replace(section, `## ![[${folderName}-\u7B2C${counter - 1}\u5927\u984C\u7B2C${cleanTitle}\u984C]]
`);
          }
        }
        editor.setValue(updatedContent);
      } catch (error) {
        console.error("Error splitting document:", error);
        if (error instanceof TypeError) {
          new import_obsidian.Notice("\u62C6\u5206\u6587\u4EF6\u6642\u767C\u751F\u985E\u578B\u932F\u8AA4\uFF0C\u8ACB\u6AA2\u67E5\u63A7\u5236\u53F0\u4EE5\u7372\u53D6\u8A73\u7D30\u8CC7\u8A0A\u3002");
        } else if (error instanceof ReferenceError) {
          new import_obsidian.Notice("\u62C6\u5206\u6587\u4EF6\u6642\u767C\u751F\u5F15\u7528\u932F\u8AA4\uFF0C\u8ACB\u6AA2\u67E5\u63A7\u5236\u53F0\u4EE5\u7372\u53D6\u8A73\u7D30\u8CC7\u8A0A\u3002");
        }
      }
    }
  }
  /**
   * 整理文件
   * - 如果一行中只有1個數字而沒有其他文字，刪除這一行
   * - 如果一行以"n."開始，去除"n."到下一個"？"間的所有換行
   */
  cleanDocument() {
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if (activeView) {
      const editor = activeView.editor;
      let content = editor.getValue();
      content = content.replace(/^\d+\s*$/gm, "");
      content = content.replace(/(\d+\.[^？]*？)/gm, (match, p1) => p1.replace(/\n/g, ""));
      content = content.replace(/(「[^」]*」)/gm, (_, p1) => p1.replace(/\n/g, ""));
      content = content.replace(/(（[^）]*）)/gm, (_, p1) => p1.replace(/\n/g, ""));
      content = content.replace(/\([^)]*\)/gm, (match) => match.replace(/\n/g, ""));
      editor.setValue(content);
    }
  }
  // 整理條文對照表
  cleanTable() {
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if (activeView) {
      const editor = activeView.editor;
      let content = editor.getValue();
      let yamlHeader = "";
      const yamlMatch = content.match(/^---\n[\s\S]*?\n---\n/);
      if (yamlMatch) {
        yamlHeader = yamlMatch[0];
        content = content.slice(yamlHeader.length);
      }
      content = content.replace(/\*\*/g, "==").replace(/\(/g, "\uFF08").replace(/\)/g, "\uFF09").replace(/<br>/g, " ").replace(/[  \t]+/g, " ");
      content = content.split("\n").filter((line) => !/^[\|\-\s]*$/.test(line)).join("\n");
      content = content.replace(/\| +/g, "|");
      const lines = content.split("\n");
      for (let i = 1; i < lines.length; i++) {
        if (lines[i].startsWith("|") && !/\|第[零一二三四五六七八九十百千萬億兆]+\s*條.*$/.test(lines[i])) {
          const previousCells = lines[i - 1].split("|");
          const currentCells = lines[i].split("|");
          for (let j = 0; j < currentCells.length; j++) {
            if (currentCells[j].trim() !== "") {
              previousCells[j] = (previousCells[j] || "") + currentCells[j];
            }
          }
          lines[i - 1] = previousCells.join("|");
          lines.splice(i, 1);
          i--;
        }
      }
      content = lines.join("\n");
      content = content.replace(/(?<![a-zA-Z0-9_.,])[  \t]+|[  \t]+(?![a-zA-Z0-9_.,])|^[ \t]+|[ \t]+$/gm, "");
      content = content.split("\n").map((line) => {
        if (line.startsWith("|")) {
          const parts = line.split("|");
          if (parts.length > 3) {
            const firstPart = parts.slice(0, 3).join("|");
            let secondPart = parts.slice(3).join("|").replace(/\|\s*$/, "");
            secondPart = secondPart.replace(/(\d+)\./g, "\n		$1. ");
            secondPart = secondPart.replace(/([零一二三四五六七八九十百千萬億兆]+)、/g, (match, p1) => `
${this.convertChineseNumberToArabic(p1)}. `);
            secondPart = secondPart.replace(/（([零一二三四五六七八九十百千萬億兆]+)）/g, (match, p1) => `
	${this.convertChineseNumberToArabic(p1)}. `);
            return `
|\u4FEE\u6B63\u5F8C|\u4FEE\u6B63\u524D|
|---|---|
${firstPart}|
\u8AAA\u660E\uFF1A${secondPart}`;
          }
        }
        return line;
      }).join("\n");
      content = content.replace(/,(?=[a-zA-Z])/g, ", ").replace(/([a-z])([A-Z])/g, "$1 $2");
      content = content.replace(
        /\|修正後\|修正前\|\n\|---\|---\|\n\|(==)*第(==)*([零一二三四五六七八九十百千萬億兆]+)(==)*條(==)*/g,
        (_, equalsBeforeArticle, equalsBeforeNumber, chineseNumber, equalsAfterNumber, equalsAfterArticle) => {
          return `###### \u7B2C${chineseNumber}\u689D
|\u4FEE\u6B63\u5F8C|\u4FEE\u6B63\u524D|
|---|---|
|${equalsBeforeArticle || ""}\u7B2C${equalsBeforeNumber || ""}${chineseNumber}${equalsAfterNumber || ""}\u689D${equalsAfterArticle || ""}`;
        }
      );
      content = yamlHeader + content;
      editor.setValue(content);
    }
  }
  /**
   * 將中文數字轉換為阿拉伯數字
   */
  convertChineseNumberToArabic(chineseNumber) {
    const chineseDigits = "\u96F6\u4E00\u4E8C\u4E09\u56DB\u4E94\u516D\u4E03\u516B\u4E5D";
    const chineseUnits = "\u5341\u767E\u5343\u842C\u5104\u5146";
    let result = 0;
    let unit = 1;
    let temp = 0;
    for (let i = chineseNumber.length - 1; i >= 0; i--) {
      const char = chineseNumber[i];
      const digit = chineseDigits.indexOf(char);
      if (digit !== -1) {
        temp += digit * unit;
      } else {
        const unitIndex = chineseUnits.indexOf(char);
        if (unitIndex !== -1) {
          unit = Math.pow(10, unitIndex + 1);
          result += temp * unit;
          temp = 0;
        }
      }
    }
    result += temp;
    return result;
  }
};
//# sourceMappingURL=data:application/json;base64,
